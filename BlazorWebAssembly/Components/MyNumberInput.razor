<!--
Blazor component for a decimal input field with formatting with period '.'
as thousands separator and comma ',' as decimal separator.

Parameters:
- Value: Bound decimal value.
- DecimalPlaces: Number of decimal places (default is 2).
- ValueChanged: Callback for value changes.
-->

<input type="text" class="input-group"
       @bind="FormattedValue"
       @onkeydown = "HandleKeyPress"
       @onkeydown:preventDefault = "@preventDefault"
       @oninput="OnInput" 
       @onblur="OnBlur" 
       @onfocus="OnFocus"
       style="width: 25vw; text-align: right;" />

@code {
    [Parameter] public decimal Value { get; set; }
    [Parameter] public int DecimalPlaces { get; set; } = 2;
    [Parameter] public EventCallback<decimal> ValueChanged { get; set; }

    public string FormattedValue { set; get; }
    string format = "#,##0.";

    bool preventDefault = false;
    public bool commaExist = false;
    int decimalCount = 0;

    protected override void OnInitialized()
    {
        for(int i = 0; i < DecimalPlaces; i++)
        {
            format += "0";
        }
        FormattedValue = FormatValue(Value);
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        bool isNum = IsNumericLetter(e.Key, FormattedValue);

        if(DecimalPlaces == 0 && e.Key.ToCharArray()[0] == ',')
            preventDefault = true;
        else if ((isNum && decimalCount < DecimalPlaces) || e.Key == "Backspace" || (isNum && !commaExist))
            preventDefault = isNum == false;
        else 
            preventDefault = true;


        if (FormattedValue.Contains(','))
            commaExist = true;
        else
        {
            decimalCount = 0;
            commaExist = false;
        }

        if(isNum && commaExist && decimalCount < DecimalPlaces && e.Key != "Backspace")
            decimalCount++;
        if(decimalCount != 0 && e.Key == "Backspace")
            decimalCount--;
    }

    static bool IsNumericLetter(string letter, string text)
    {
        if (letter == "Backspace" || letter == ".")
            return true;

        char keyChar = letter.ToCharArray()[0];

        if (char.IsDigit(keyChar))
            return true;

        if (keyChar == ',' && text.Contains(',') == false)
            return true;

        return false;
    }


    private void OnInput(ChangeEventArgs e)
    {
        string input = e.Value.ToString();

        if (decimal.TryParse(input, out decimal result))
        {
            Value = result;
            ValueChanged.InvokeAsync(Value);
        }

        FormattedValue = input;
    }

    private void OnBlur()
    {
        FormattedValue = FormatValue(Value);
        Value = decimal.Parse(FormattedValue);
        ValueChanged.InvokeAsync(Value);
    }

    private void OnFocus()
    {
        FormattedValue = Value.ToString();
    }

    private string FormatValue(decimal value)
    {
        if(DecimalPlaces == 0)
            return value.ToString("#,##0", new System.Globalization.CultureInfo("de-DE"));
        else
            return value.ToString(format, new System.Globalization.CultureInfo("de-DE"));
    }
}
