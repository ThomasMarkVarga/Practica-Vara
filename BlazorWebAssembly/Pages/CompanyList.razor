@page "/companies"
@inject IAPICallService APICallService
@inject NavigationManager NavigationManager
@attribute [StreamRendering(true)]

<h3>Company List</h3>

@if(companies == null)
{
    <span>Loading...</span>
}
else if(companies.Length == 0)
{
    <span>No companies found</span>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>CIF</th>
                <th>Name</th>
                <th>Address</th>
                <th>County</th>
                <th>Phone</th>
                <th>Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var comp in companies)
            {
                <tr>
                    <td>@comp.companyCIF</td>
                    <td>@comp.companyName</td>
                    <td>@comp.companyAddress</td>
                    <td>@comp.companyCounty</td>
                    <td>@comp.companyPhone</td>
                    <td>
                        <button @onclick ="() => EditCompany(comp.companyCIF)">Edit</button>
                        <button @onclick ="() => DeleteCompany(comp.companyCIF)">Delete</button>
                        </td>
                </tr>
            }
        </tbody>
    </table>
}

<button @onclick="CreateCompany" class="btn btn-primary">Add Company</button>

@code {
    Company[] companies = null;

    protected override async Task OnInitializedAsync()
    {
        //await Task.Delay(1000);
        companies = await APICallService.getAllCompanies();
    }

    void CreateCompany()
    {
        NavigationManager.NavigateTo("/addcompany");
    }

    void EditCompany(string CIF)
    {
        NavigationManager.NavigateTo($"/editcompany/{CIF}");
    }

    async Task DeleteCompany(string CIF)
    {
        await APICallService.DeleteCompany(CIF);

        NavigationManager.Refresh();
    }
}
