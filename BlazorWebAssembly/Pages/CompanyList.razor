@page "/companies"
@inject IAPICallService APICallService
@inject NavigationManager NavigationManager
@attribute [StreamRendering(true)]

<h3>Company List</h3>

@if(companies == null)
{
    <span>Loading...</span>
}
else if(companies.Length == 0)
{
    <span>No companies found</span>
}
else
{
    <Grid 
        TItem="Company"
        Class = "table table-hover table-bordered table-striped"
        Data = "myCompanies"
        AllowFiltering = "true"
        AllowSorting = "true"
        Responsive = "true">

        <GridColumn TItem = "Company" HeaderText = "CIF" PropertyName="companyCIF" SortKeySelector="item => item.companyCIF">
            @context.companyCIF
        </GridColumn>
        <GridColumn TItem="Company" HeaderText="Name" PropertyName="companyName" SortKeySelector="item => item.companyName">
            @context.companyName
        </GridColumn>
        <GridColumn TItem="Company" HeaderText="Address" PropertyName="companyAddress" SortKeySelector="item => item.companyAddress">
            @context.companyAddress
        </GridColumn>
        <GridColumn TItem="Company" HeaderText="County" PropertyName="companyCounty" SortKeySelector="item => item.companyCounty">
            @context.companyCounty
        </GridColumn>
        <GridColumn TItem="Company" HeaderText="Phone" PropertyName="companyPhone" SortKeySelector="item => item.companyPhone">
            @context.companyPhone
        </GridColumn>
        <GridColumn TItem = "Company" HeaderText = "Options" Filterable="false">
            <ChildContent> 
                <button @onclick ="() => EditCompany(context.companyCIF)">Edit</button>
                <button @onclick ="() => ShowModalDelete(context.companyCIF)">Delete</button>
            </ChildContent>
        </GridColumn>
    </Grid>

    <Modal @ref="modal"
           ShowCloseButton="false"
           CloseOnEscape="false">
        <BodyTemplate>
            Are you sure you want to delete this company?
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" @onclick = "modal.HideAsync">No</Button>
            <Button Color ="ButtonColor.Primary" @onclick = "DeleteCompany">Yes</Button>
        </FooterTemplate>
    </Modal>

    <Modal @ref="deleteConfirmationModal"
           ShowCloseButton="false"
           CloseOnEscape="false">
        <BodyTemplate>
            Company deleted succefully!
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Primary" @onclick ="HideConfirmationModal">Ok</Button>
        </FooterTemplate>
    </Modal>

    <Modal @ref="errorModal"
           ShowCloseButton="false"
           CloseOnEscape="false">
        <BodyTemplate>
            An error ocurred! Try again!
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Primary" @onclick="HideErrorModal">Ok</Button>
        </FooterTemplate>
    </Modal>
}

<button @onclick="CreateCompany" class="btn btn-primary">Add Company</button>


@code {
    Company[]? companies;
    IEnumerable<Company>? myCompanies;
    private Modal modal;
    private Modal deleteConfirmationModal;
    private Modal errorModal;
    string CIFtoBeDeleted;

    protected override async Task OnInitializedAsync()
    {
       // await Task.Delay(1000);
        companies = await APICallService.getAllCompanies();
        myCompanies = companies;
    }

    void CreateCompany()
    {
        NavigationManager.NavigateTo("/addcompany");
    }

    void EditCompany(string CIF)
    {
        NavigationManager.NavigateTo($"/editcompany/{CIF}");
    }

    async Task DeleteCompany()
    {
        var response = await APICallService.DeleteCompany(this.CIFtoBeDeleted);
        this.CIFtoBeDeleted = "";
        if (response.status == StatusCode.OK)
        {
            await modal.HideAsync();
            await deleteConfirmationModal.ShowAsync();
        }
        else
        {
            await errorModal.ShowAsync();
        }
    }

    async Task ShowModalDelete(string CIF)
    {
        this.CIFtoBeDeleted = CIF;
        await modal.ShowAsync();   
    }

    async Task HideConfirmationModal()
    {
        await deleteConfirmationModal.HideAsync();
        NavigationManager.Refresh();
    }

    async Task HideErrorModal()
    {
        await errorModal.HideAsync();
        NavigationManager.Refresh();
    }
}
